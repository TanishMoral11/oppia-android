apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion target_sdk_version
  buildToolsVersion build_tools_version

  defaultConfig {
    minSdkVersion min_sdk_version
    targetSdkVersion target_sdk_version
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    multiDexEnabled true
    javaCompileOptions {
      annotationProcessorOptions {
        includeCompileClasspath true
      }
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
      all {
        // Enable forking to ensure each test is properly run in isolation. For context, see:
        // https://discuss.gradle.org/t/36066/2 & https://github.com/oppia/oppia-android/issues/1942
        forkEvery = 1
        maxParallelForks = Runtime.getRuntime().availableProcessors()

        // https://discuss.gradle.org/t/29495/2 & https://stackoverflow.com/a/34299238.
        testLogging {
          events "passed", "skipped", "failed"
          showExceptions = true
          exceptionFormat = "full"
          showCauses = true
          showStackTraces = true
          showStandardStreams = false
        }
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation(
      "androidx.appcompat:appcompat:$androidx_appcompat_appcompat",
      "com.google.dagger:dagger:$com_google_dagger_dagger",
      "com.google.guava:guava:$com_google_guava_guava",
      "com.google.protobuf:protobuf-javalite:$com_google_protobuf_protobuf_javalite",
      "com.squareup.moshi:moshi-kotlin:$com_squareup_moshi_moshi_kotlin",
      "com.squareup.okhttp3:okhttp:$com_squareup_okhttp3_okhttp",
      "org.jetbrains.kotlinx:kotlinx-coroutines-android:$org_jetbrains_kotlinx_kotlinx_coroutines_android",
  )
  compileOnly(
      "jakarta.xml.bind:jakarta.xml.bind-api:$jakarta_xml_bind_jakarta_xml_bind_api",
      "javax.annotation:javax.annotation-api:$javax_annotation_javax_annotation_api",
      "org.glassfish.jaxb:jaxb-runtime:$org_glassfish_jaxb_jaxb_runtime",
  )
  testImplementation(
      "androidx.test.ext:junit:$androidx_test_ext_junit",
      "androidx.test.ext:truth:$androidx_test_ext_truth",
      "com.google.dagger:dagger:$com_google_dagger_dagger",
      "com.google.truth:truth:$com_google_truth_truth",
      "com.google.truth.extensions:truth-liteproto-extension:$com_google_truth_extensions_truth_liteproto_extension",
      "com.squareup.okhttp3:mockwebserver:$com_squareup_okhttp3_mockwebserver",
      "com.squareup.okhttp3:okhttp:$com_squareup_okhttp3_okhttp",
      "junit:junit:$junit_junit",
      "org.jetbrains.kotlinx:kotlinx-coroutines-test:$org_jetbrains_kotlinx_kotlinx_coroutines_test",
      "org.mockito:mockito-core:$org_mockito_mockito_core",
      "org.robolectric:robolectric:$org_robolectric_robolectric",
      project(":testing"),
  )
  // TODO(#59): Remove this once Bazel is introduced
  // TODO(#97): Isolate retrofit-mock dependency from production
  api(
      "com.squareup.retrofit2:converter-moshi:$com_squareup_retrofit2_converter_moshi",
      "com.squareup.retrofit2:retrofit:$com_squareup_retrofit2_retrofit",
      "com.squareup.retrofit2:retrofit-mock:$com_squareup_retrofit2_retrofit_mock",
  )
  androidTestImplementation(
      "androidx.test:runner:$androidx_test_runner",
      "androidx.test.espresso:espresso-core:$androidx_test_espresso_espresso_core"
  )
  kapt(
      "com.google.dagger:dagger-compiler:$com_google_dagger_dagger_compiler",
      "com.squareup.moshi:moshi-kotlin-codegen:$com_squareup_moshi_moshi_kotlin_codegen"
  )
  kaptTest(
      "com.google.dagger:dagger-compiler:$com_google_dagger_dagger_compiler"
  )

  implementation project(":utility")
  implementation project(":model")
  testImplementation project(":model")
}
// The GeneratedMessageLite implementations of protobufs are depending on protobuf-java
// instead of protobuf-lite after Android Studio 3.5,
// The below command stops that from happening: https://github.com/google/tink/issues/282
configurations {
  all*.exclude module: 'protobuf-java'
}
