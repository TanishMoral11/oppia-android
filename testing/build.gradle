apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion target_sdk_version
  buildToolsVersion build_tools_version

  defaultConfig {
    minSdkVersion min_sdk_version
    targetSdkVersion target_sdk_version
    versionCode 1
    versionName "1.0"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
      all {
        // Enable forking to ensure each test is properly run in isolation. For context, see:
        // https://discuss.gradle.org/t/36066/2 & https://github.com/oppia/oppia-android/issues/1942
        forkEvery = 1
        maxParallelForks = Runtime.getRuntime().availableProcessors()

        // https://discuss.gradle.org/t/29495/2 & https://stackoverflow.com/a/34299238.
        testLogging {
          events "passed", "skipped", "failed"
          showExceptions = true
          exceptionFormat = "full"
          showCauses = true
          showStackTraces = true
          showStandardStreams = false
        }
      }
    }
  }
}

// See notice for the excluded files in domain/build.gradle for an explanation. Note that these
// tests can't be built in Gradle since they depend on app layer dependencies & Gradle doesn't allow
// a dependency between this & the app module since the latter is an Android application rather than
// a library.
def filesToExclude = [
    '**/*InitializeDefaultLocaleRuleCustomContextTest*.kt',
    '**/*InitializeDefaultLocaleRuleOmissionTest*.kt',
    '**/*InitializeDefaultLocaleRuleTest*.kt',
    '**/*TestSyncStatusManagerTest*.kt', // This depends on another module's test base.
]
tasks.withType(SourceTask.class).configureEach {
  it.exclude(filesToExclude)
}
android.sourceSets.test.java.exclude(filesToExclude)
android.sourceSets.test.kotlin.exclude(filesToExclude)

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation(
      "androidx.annotation:annotation:$androidx_annotation_annotation",
      "androidx.appcompat:appcompat:$androidx_appcompat_appcompat",
      "androidx.lifecycle:lifecycle-livedata-ktx:$androidx_lifecycle_lifecycle_livedata_ktx",
      "androidx.core:core-ktx:$androidx_core_core_ktx",
      "androidx.test:core:$androidx_test_core",
      "androidx.test.espresso:espresso-accessibility:$androidx_test_espresso_espresso_accessibility",
      "androidx.test.espresso:espresso-core:$androidx_test_espresso_espresso_core",
      "androidx.test.ext:truth:$androidx_test_ext_truth",
      "androidx.test:runner:$androidx_test_runner",
      "com.google.android.material:material:$com_google_android_material_material",
      "com.google.dagger:dagger:$com_google_dagger_dagger",
      "com.google.firebase:firebase-auth-ktx:$com_google_firebase_firebase_auth_ktx",
      "com.google.protobuf:protobuf-javalite:$com_google_protobuf_protobuf_javalite",
      "com.google.truth:truth:$com_google_truth_truth",
      "com.google.truth.extensions:truth-liteproto-extension:$com_google_truth_extensions_truth_liteproto_extension",
      "nl.dionsegijn:konfetti:$nl_dionsegijn_konfetti",
      "org.jetbrains.kotlinx:kotlinx-coroutines-test:$org_jetbrains_kotlinx_kotlinx_coroutines_test",
      "org.robolectric:robolectric:$org_robolectric_robolectric",
      "org.jetbrains.kotlin:kotlin-reflect:$org_jetbrains_kotlin_kotlin_reflect",
      "org.jetbrains.kotlin:kotlin-stdlib:$org_jetbrains_kotlin_kotlin_stdlib",
      "org.jetbrains.kotlinx:kotlinx-coroutines-guava:$org_jetbrains_kotlinx_kotlinx_coroutines_guava",
      "org.mockito:mockito-core:$org_mockito_mockito_core",
      project(":domain"),
      project(":model"),
      project(":utility"),
  )
  compileOnly(
      "jakarta.xml.bind:jakarta.xml.bind-api:$jakarta_xml_bind_jakarta_xml_bind_api",
      "javax.annotation:javax.annotation-api:$javax_annotation_javax_annotation_api",
      "org.glassfish.jaxb:jaxb-runtime:$org_glassfish_jaxb_jaxb_runtime",
  )
  testImplementation(
      "androidx.lifecycle:lifecycle-livedata-ktx:$androidx_lifecycle_lifecycle_livedata_ktx",
      "androidx.test.ext:junit:$androidx_test_ext_junit",
      "com.google.android.material:material:$com_google_android_material_material",
      "com.google.truth:truth:$com_google_truth_truth",
      "junit:junit:$junit_junit",
      "org.jetbrains.kotlin:kotlin-reflect:$org_jetbrains_kotlin_kotlin_reflect",
      "org.mockito:mockito-core:$org_mockito_mockito_core",
      project(":domain"),
  )
  kapt(
      "com.google.dagger:dagger-compiler:$com_google_dagger_dagger_compiler",
  )
  kaptTest(
      "com.google.dagger:dagger-compiler:$com_google_dagger_dagger_compiler",
  )
  annotationProcessor(
      "com.google.auto.service:auto-service:$com_google_auto_service_auto_service",
  )
  // TODO(#59): Remove this once Bazel is introduced
  // sufficiently visible for generated Dagger code. This can be done more cleanly via Bazel since dependencies can be
  // controlled more directly than in Gradle.
  implementation project(':model')
}
// The GeneratedMessageLite implementations of protobufs are depending on protobuf-java
// instead of protobuf-lite after Android Studio 3.5,
// The below command stops that from happening: https://github.com/google/tink/issues/282
configurations {
  all*.exclude module: 'protobuf-java'
}
